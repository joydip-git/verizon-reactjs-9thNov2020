1. class keyword? this keyword?
2. lifecycle? (useEffect)
3. HOC/RP (custom hook)
4. state (useState)

     HOC							RP
-------------------------------------------------------------------------------------------------
a. extra object						a. extra object
b. main component gets nested				b. no
c. we get a class component back			c. we retain the original component
d. event overlapping					d. no chance
e. forward ref issue					e. no
f. error handling					f. no error handling


const app = (props, ref)=>{}
export default forwardRef(hoc(app));

<app ref={}/>

class app {}
export default hoc(app)

<app ref = {}/>

componentDidUpdate(){
  fetchData()-->state change
  apply style()
  calculate scroll position
  reset the mouse posn
  unsubscribing
}

useState, useRef, useMemo, useEffect, useReducer,...

useState()



1. design: material-ui
2. security: JSW token
3. redux-async: saga (generators in JS)
4. form: Formik
5. mobile: React Native
6. architecture: React Fiber
7. server side rendering: Next JS